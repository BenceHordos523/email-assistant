/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable @typescript-eslint/no-misused-promises */
import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useForm } from "react-hook-form";
import { api } from "~/utils/api";
import fs from "fs";
import MsgReader from "@kenjiuno/msgreader";
import { useState } from "react";

interface emailContentType {
  from: string;
  subject: string;
  content: string;
}

const CreateEmail: NextPage = () => {
  const router = useRouter();
  const [emailContent, setEmailContent] = useState<emailContentType>({
    from: "",
    subject: "",
    content: "",
  });

  const { mutateAsync, isLoading, data } =
    api.emails.create.useMutation<emailContentType>({
      onSuccess: () => {
        console.log("Success!");
      },
      onError: (e) => {
        const errorMessage = e.data?.zodError?.fieldErrors.content;

        if (errorMessage && errorMessage[0]) {
          alert(errorMessage[0]);
        } else {
          alert("Failed to post! Please try again later.");
        }
      },
    });

  const { data: emails } = api.emails.list.useQuery();

  console.log(emails);

  const handleOnChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    // console.log(e.target.files);

    if (!e.target.files) return;

    const file = e.target.files[0];

    if (!file) return;

    const msgFileBuffer = await createFileBuffer(file);
    const testMsg = new MsgReader(msgFileBuffer);
    const testMsgInfo = testMsg.getFileData();

    if (!testMsgInfo) return;

    const { body, senderEmail, subject } = testMsgInfo;

    if (!body) return;
    if (!senderEmail) return;
    if (!subject) return;

    setEmailContent({
      from: senderEmail,
      subject: subject,
      content: removeBoschPart(body),
    });
  };

  function removeBoschPart(inputString: string): string {
    const startIndex = inputString.indexOf("Robert Bosch Elektronika Kft.");
    if (startIndex !== -1) {
      return inputString.substring(0, startIndex);
    } else {
      return inputString;
    }
  }

  async function createFileBuffer(file: File): Promise<Buffer> {
    return new Promise<Buffer>((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = (event) => {
        const buffer = Buffer.from(reader.result as ArrayBuffer);
        resolve(buffer);
      };
      reader.onerror = (event) => {
        reject(reader.error);
      };
      reader.readAsArrayBuffer(file);
    });
  }

  return (
    <>
      <Head>
        <title>E-Mail AI</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen  flex-col items-center justify-start">
        <div className="container flex max-w-xl flex-col items-center justify-center gap-2 px-4 py-16 ">
          <div>
            <h2 className="text-4xl font-extrabold dark:text-white">
              E-Mail Assistant AI
            </h2>
            <p className="my-4 text-lg text-gray-500">
              To use the summary and prioritization function of E-Mail
              Assistant, simply upload your Microsoft Outlook msg files to the
              app.
            </p>
            <p className="mb-4 text-lg font-normal text-gray-500 dark:text-gray-400">
              The app will then process the emails and send the data over to
              ChatGPT. ChatGPT will analyze the content of each email and
              generate a summary of the key action items.
            </p>
            <p className="mb-4 text-lg font-normal text-gray-500 dark:text-gray-400">
              This summary is then used to create a to-do list, which is
              prioritized based on the importance and urgency of each task.
            </p>
          </div>
          <div className="w-full">
            <form>
              <label
                className="mb-2 block text-sm font-medium text-gray-900 dark:text-white"
                htmlFor="multiple_files"
              >
                Select multiple e-mails
              </label>
              <input
                className="block w-full cursor-pointer rounded-lg border border-gray-300 bg-gray-50 text-sm text-gray-900 focus:outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-gray-400 dark:placeholder-gray-400"
                id="multiple_files"
                type="file"
                onChange={(e) => handleOnChange(e)}
                multiple
              />
              <p
                className="mt-1 text-sm text-gray-500 dark:text-gray-300"
                id="file_input_help"
              >
                .msg files only
              </p>
              <button
                type="button"
                className="mb-2 mr-2 mt-3 rounded-lg bg-blue-700 px-5 py-2.5 text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                onClick={() => mutateAsync(emailContent)}
              >
                Process
              </button>
            </form>
          </div>
        </div>
        <div className="flex w-full flex-col gap-8">
          <div className="flex w-full flex-row justify-evenly gap-8">
            <div className="w-50">
              <a
                href="#"
                className="block max-w-sm rounded-lg border border-gray-200 bg-white p-6 shadow hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700"
              >
                <p className="font-bold text-gray-700 dark:text-gray-400">
                  From: Bence.Hordos@hu.bosch.com
                </p>
                <p className="font-normal text-gray-700 dark:text-gray-400">
                  Subject: QMC Tracking
                </p>
                <p className="font-normal text-gray-700 dark:text-gray-400">
                  Content:{" "}
                  {removeBoschPart(`Csatolmány.
                    
                    Üdvözlettel / Best regards,

                    Bence Hordos

                    (HtvP/QMM-LS-P)
                    Robert Bosch Elektronika Kft. | Robert Bosch út 1 | H-3000 Hatvan | HUNGARY | www.bosch.hu
                    Mobile +36 70 684-4404 | Bence.Hordos@hu.bosch.com<mailto:Bence.Hordos@hu.bosch.com>

                    Registered Office: Hatvan
                    Chairman of the Supervisory Board: Daniel Korioth; Managing Directors: Arne Ziegenbein, Horváth Attila, Markus Hildenbrand`)}
                </p>
              </a>
            </div>
            <div className="w-50">
              <a
                href="#"
                className="block max-w-sm rounded-lg border border-gray-200 bg-white p-6 shadow hover:bg-gray-100 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700"
              >
                <p className="font-bold text-gray-700 dark:text-gray-400">
                  From: Bence.Hordos@hu.bosch.com
                </p>
                <p className="font-normal text-gray-700 dark:text-gray-400">
                  Subject: QMC Tracking
                </p>
                <p className="font-normal text-gray-700 dark:text-gray-400">
                  Summarized content:{" "}
                  {`This was a summary of the email.
                    List of todos:
                    - Do this
                    - Do that
                    - Do the other thing`}
                </p>
              </a>
            </div>
          </div>
          <hr className="my-8 h-px border-0 bg-gray-200 dark:bg-gray-700"></hr>
        </div>
      </main>
    </>
  );
};

export default CreateEmail;
